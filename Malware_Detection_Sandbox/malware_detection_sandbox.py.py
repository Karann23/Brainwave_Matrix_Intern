import tkinter as tk
from tkinter import filedialog, scrolledtext, messagebox
import hashlib
import requests
import os
import time
import psutil
import threading

VT_API_KEY = "input Virus total api key"


# GUI setup
root = tk.Tk()
root.title("Malware Detection Sandbox")
root.geometry("700x500")
root.resizable(False, False)


# Log output to GUI
def log_message(message):
    log_area.config(state=tk.NORMAL)
    log_area.insert(tk.END, message + "\n")
    log_area.see(tk.END)
    log_area.config(state=tk.DISABLED)


# File Selection
def select_file():
    global selected_file
    file_path = filedialog.askopenfilename()
    if file_path:
        selected_file = file_path
        log_message(F'[+] Selected File: {selected_file}')
    else:
        log_message("[!] No file selected.")


# SHA256 hashing
def get_file_hash(file_path):
    sha256_hash = hashlib.sha256()
    with open(file_path, "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            sha256_hash.update(byte_block)
    return sha256_hash.hexdigest()


# VirusTotal Query
def scan_with_virustotal(file_hash):
    url = f"https://www.virustotal.com/api/v3/files/{file_hash}"
    headers = {"x-apikey": VT_API_KEY}
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        data = response.json()
        stats = data.get("data", {}).get("attributes", {}).get("last_analysis_stats", {})
        total_engines = sum(stats.values())
        malicious = stats.get("malicious", 0)
        log_message(f"[VT] Total Engines: {total_engines} | Malicious: {malicious}")
        if malicious > 0:
            log_message("[VT] File flagged as MALICIOUS by VirusTotal.")
        else:
            log_message("[VT] File appears clean.")
    else:
        log_message(f"[VT] Error: Unable to scan (Status code {response.status_code})")


# Sandbox Simulation
def run_in_sandbox(file_path):
    log_message("[Sandbox] Starting simulated execution..")
    time.sleep(1)
    log_message(f"[Sandbox] Simulating execution of {os.path.basename(file_path)}")
    time.sleep(1)
    log_message("[Sandbox] Monitoring file behaviour...")
    time.sleep(2)

    suspicious_actions = [
        "Creating unusual registry keys..."
        "Trying to connect to suspicious IP..."
        "Modifying system files..."
    ]
    for action in suspicious_actions:
        log_message(f"[Sandbox] Suspicious Activity Detected: {action}")
        time.sleep(1)

    log_message("[Sandbox] Simulation complete. Potentially malicious behaviour detected")


# Start Scan
def start_scan():
    try:
        if not selected_file:
            messagebox.showerror("Error, Please select a file first.")
            return
    except NameError:
        messagebox.showerror("Error, Please selected a file first.")
        return
    
    log_message("Starting Malware Analysis...")
    file_hash = get_file_hash(selected_file)
    log_message(f"File SHA256: {file_hash}")

    scan_with_virustotal(file_hash)
    run_in_sandbox(selected_file)

    log_message("Analysis Completed.")


# Save report
def save_report():
    try:
        report_path = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text files","*.txt")])
        if report_path:
            with open(report_path, "w") as f:
                f.write(log_area.get(1.0, tk.END))
            messagebox.showinfo("Success, Report Saved.")
    except Exception as e:
        messagebox.showerror(f"Error, Failed to save report{e}")


# GUI Layout
frame = tk.Frame(root)
frame.pack(pady=10)
select_btn = tk.Button(frame, text="Select File", command=select_file, width=20, bg="lightblue")
select_btn.grid(row=0, column=0, padx=10)

scan_btn = tk.Button(
    frame,
    text="Start Scan",
    command=lambda: threading.Thread(target=start_scan).start(),
    width=20,
    bg="orange"
)
scan_btn.grid(row=0, column=1, padx=10)

save_btn = tk.Button(frame, text="Save Report", command=save_report, width=20, bg="lightgreen")
save_btn.grid(row=0, column=2, padx=10)

log_area = scrolledtext.ScrolledText(root, state=tk.DISABLED, wrap=tk.WORD, height=20, width=80)
log_area.pack(pady=10)


# Main program
root.mainloop()

